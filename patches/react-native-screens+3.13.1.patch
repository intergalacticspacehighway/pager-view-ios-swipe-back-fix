diff --git a/node_modules/react-native-screens/ios/RNSScreenStack.m b/node_modules/react-native-screens/ios/RNSScreenStack.m
index 47c8f8d..40cd260 100644
--- a/node_modules/react-native-screens/ios/RNSScreenStack.m
+++ b/node_modules/react-native-screens/ios/RNSScreenStack.m
@@ -10,6 +10,7 @@
 #import <React/RCTTouchHandler.h>
 #import <React/RCTUIManager.h>
 #import <React/RCTUIManagerUtils.h>
+#import "ReactNativePageView.h"
 
 @interface RNSScreenStackView () <
     UINavigationControllerDelegate,
@@ -20,6 +21,8 @@ @interface RNSScreenStackView () <
 @property (nonatomic) NSMutableArray<UIViewController *> *presentedModals;
 @property (nonatomic) BOOL updatingModals;
 @property (nonatomic) BOOL scheduleModalsUpdate;
+@property (nonatomic) ReactNativePageView* pageView;
+@property (nonatomic) BOOL pageViewScrollChanged;
 
 @end
 
@@ -119,6 +122,20 @@ - (void)navigationController:(UINavigationController *)navigationController
       break;
     }
   }
+    
+    id<UIViewControllerTransitionCoordinator> tc = navigationController.topViewController.transitionCoordinator;
+            [tc notifyWhenInteractionEndsUsingBlock:^(id<UIViewControllerTransitionCoordinatorContext> context) {
+                if ([context isCancelled]) {
+                    if (self.pageView!= nil && self.pageViewScrollChanged) {
+                        [self.pageView shouldScroll: true];
+                    }
+                }
+                self.pageViewScrollChanged = false;
+                self.pageView = nil;
+            }];
+             
+    
+    
   [RNSScreenStackHeaderConfig willShowViewController:viewController animated:animated withConfig:config];
 }
 
@@ -594,6 +611,10 @@ - (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
     return NO;
   }
 
+  if (gestureRecognizer == _controller.interactivePopGestureRecognizer) {
+    return YES;
+  }
+    
 #if TARGET_OS_TV
   [self cancelTouchesInParent];
   return YES;
@@ -637,6 +658,44 @@ - (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
 #endif
 }
 
+
+- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
+    
+
+    BOOL isBackGesture = false;
+    // full screen swipe gesture handler
+    if ([gestureRecognizer isKindOfClass: [RNSPanGestureRecognizer class]]) {
+        RNSPanGestureRecognizer *pan = (RNSPanGestureRecognizer*) gestureRecognizer;
+
+        CGPoint translation = [pan translationInView:_controller.view];
+        isBackGesture = translation.x > 0;
+    
+
+        if ([otherGestureRecognizer isKindOfClass: NSClassFromString(@"UIScrollViewPanGestureRecognizer")] && [otherGestureRecognizer.view.reactViewController isKindOfClass: [UIPageViewController class]]
+            && isBackGesture
+            ){
+
+            UIPageViewController* pageController = otherGestureRecognizer.view.reactViewController;
+            if (pageController != nil && [pageController.delegate isKindOfClass:[ReactNativePageView class]]) {
+                ReactNativePageView* page = pageController.delegate;
+                if (page != nil && page.currentIndex == 0) {
+                    if (page.scrollEnabled) {
+                        _pageView = page;
+                        [_pageView shouldScroll: false];
+                        _pageViewScrollChanged = true;
+                    }
+
+                    return YES;
+                }
+            }
+        }
+        
+    }
+
+    return NO;
+
+}
+
 #if !TARGET_OS_TV
 - (void)setupGestureHandlers
 {
